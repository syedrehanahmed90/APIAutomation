{
	"info": {
		"_postman_id": "ab53d13f-e9ea-4412-b965-8aa51bebfbad",
		"name": "Cloudways",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "AccessToken",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "818820dd-2563-41b2-846b-85f84456baad",
						"exec": [
							"var resData = JSON.parse(responseBody);\r",
							"\r",
							"//Assertions\r",
							"pm.test(\"Status code should be 200: \"+pm.response.code,function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Verify Access Token is getting generated, Access Token is: \"+ resData.access_token, function(){\r",
							"    pm.expect(resData).to.have.property('access_token')\r",
							"});\r",
							"pm.test(\"Verify if returning the access token type: \" +resData.token_type, function(){\r",
							"    pm.expect(resData).to.have.property('token_type');\r",
							"});\r",
							"pm.test(\"Verify if returning expiration time: \" +resData.expires_in, function(){\r",
							"    pm.expect(resData).to.have.property('expires_in');\r",
							"});\r",
							"\r",
							"// Set Variables\r",
							"pm.environment.set (\"access_token\", resData.access_token); \r",
							"pm.environment.set (\"token_type\", resData.token_type + \" \"); \r",
							""
						],
						"type": "text/javascript"
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"id": "fbb6b659-26c0-4192-84e3-d9fcf4f8ae4c",
						"exec": [
							"console.log(\"email\", data.email);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "email",
							"value": "{{email}}",
							"type": "text"
						},
						{
							"key": "api_key",
							"value": "{{api_key}}",
							"type": "text"
						},
						{
							"key": "grant_type",
							"value": "{{grant_type}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{cloudwaysUrl}}/api/v1/oauth/access_token",
					"host": [
						"{{cloudwaysUrl}}"
					],
					"path": [
						"api",
						"v1",
						"oauth",
						"access_token"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Server",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "11df5819-4f4d-449b-8341-3aea0c1dcaeb",
						"exec": [
							"var resData = JSON.parse(responseBody);\r",
							"\r",
							"// Assertions\r",
							"// The Content-Type must be JSON\r",
							"     pm.test(\"Response must be json\", function (){\r",
							"            pm.response.to.be.json; \r",
							"    });\r",
							"\r",
							"  // The response time must be less than 1500 milliseconds\r",
							"  tests[\"Response time is acceptable\"] = responseTime < 1500;\r",
							"\r",
							"\r",
							"// The response must have a body\r",
							"    pm.test(\"Response must have a body\", function (){\r",
							"            pm.response.to.be.withBody;\r",
							"    });\r",
							"\r",
							"pm.test(\"Status code should be 200: \"+pm.response.code,function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning Server Id: \" +resData.server.id, function(){\r",
							"    pm.expect(resData.server).to.have.property('id');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning label: \" +resData.server.label, function(){\r",
							"    pm.expect(resData.server).to.have.property('label');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning status: \" +resData.server.status, function(){\r",
							"    pm.expect(resData.server).to.have.property('status');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning tenant_id: \" +resData.server.tenant_id, function(){\r",
							"    pm.expect(resData.server).to.have.property('tenant_id');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning region: \" +resData.server.region, function(){\r",
							"    pm.expect(resData.server).to.have.property('region');\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning platform: \" +resData.server.platform, function(){\r",
							"    pm.expect(resData.server).to.have.property('platform');\r",
							"});\r",
							"\r",
							"pm.environment.set(\"server_id\",resData.server.id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"warning": "This is a duplicate header and will be overridden by the Content-Type header generated by Postman.",
						"key": "Content-Type",
						"value": "application/json"
					},
					{
						"key": "Accept",
						"value": "text/html"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}}{{access_token}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "cloud",
							"value": "{{cloud_app}}",
							"type": "text"
						},
						{
							"key": "region",
							"value": "{{region}}",
							"type": "text"
						},
						{
							"key": "instance_type",
							"value": "{{instance_type}}",
							"type": "text"
						},
						{
							"key": "application",
							"value": "{{application}}",
							"type": "text"
						},
						{
							"key": "app_version",
							"value": "{{app_version}}",
							"type": "text"
						},
						{
							"key": "project_name",
							"value": "{{project_name}}",
							"type": "text"
						},
						{
							"key": "server_label",
							"value": "{{server_label}}",
							"type": "text"
						},
						{
							"key": "app_label",
							"value": "{{app_label}}",
							"type": "text"
						},
						{
							"key": "series",
							"value": "{{series}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{cloudwaysUrl}}/api/v1/server",
					"host": [
						"{{cloudwaysUrl}}"
					],
					"path": [
						"api",
						"v1",
						"server"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete App",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "57ff3c69-a144-411c-85d5-a46cbd8663f9",
						"exec": [
							"var resData = JSON.parse(responseBody);\r",
							"\r",
							"// Assertions\r",
							"// The Content-Type must be JSON\r",
							"     pm.test(\"Response must be json\", function (){\r",
							"            pm.response.to.be.json; \r",
							"    });\r",
							"\r",
							"  // The response time must be less than 1500 milliseconds\r",
							"  tests[\"Response time is acceptable\"] = responseTime < 1500;\r",
							"\r",
							"\r",
							"// The response must have a body\r",
							"    pm.test(\"Response must have a body\", function (){\r",
							"            pm.response.to.be.withBody;\r",
							"    });\r",
							"\r",
							"pm.test(\"Status code should be 200: \"+pm.response.code,function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning operation id: \" +resData.operation_id, function(){\r",
							"    pm.expect(resData).to.have.property('operation_id');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}}{{access_token}}"
					}
				],
				"url": {
					"raw": "{{cloudwaysUrl}}/api/v1/app/{{app_id}}?server_id={{appServerId}}",
					"host": [
						"{{cloudwaysUrl}}"
					],
					"path": [
						"api",
						"v1",
						"app",
						"{{app_id}}"
					],
					"query": [
						{
							"key": "server_id",
							"value": "{{appServerId}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Add Application",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "8f2492f1-b780-47e1-ad28-e8c096054a50",
						"exec": [
							"var resData = JSON.parse(responseBody);\r",
							"\r",
							"// Assertions\r",
							"// The Content-Type must be JSON\r",
							"     pm.test(\"Response must be json\", function (){\r",
							"            pm.response.to.be.json; \r",
							"    });\r",
							"\r",
							"  // The response time must be less than 1500 milliseconds\r",
							"  tests[\"Response time is acceptable\"] = responseTime < 1500;\r",
							"\r",
							"\r",
							"// The response must have a body\r",
							"    pm.test(\"Response must have a body\", function (){\r",
							"            pm.response.to.be.withBody;\r",
							"    });\r",
							"\r",
							"pm.test(\"Status code should be 200: \"+pm.response.code,function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning operation id: \" +resData.operation_id, function(){\r",
							"    pm.expect(resData).to.have.property('operation_id');\r",
							"});\r",
							"\r",
							"pm.environment.set(\"operation_id\",resData.operation_id);"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/x-www-form-urlencoded"
					},
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}}{{access_token}}"
					}
				],
				"body": {
					"mode": "urlencoded",
					"urlencoded": [
						{
							"key": "server_id",
							"value": "{{appServerId}}",
							"type": "text"
						},
						{
							"key": "application",
							"value": "{{application}}",
							"type": "text"
						},
						{
							"key": "app_version",
							"value": "{{app_version}}",
							"type": "text"
						},
						{
							"key": "app_label",
							"value": "{{app_label}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{cloudwaysUrl}}/api/v1/app",
					"host": [
						"{{cloudwaysUrl}}"
					],
					"path": [
						"api",
						"v1",
						"app"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Server",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "a6ce1e29-6d02-4f31-9554-a4022dc43a9f",
						"exec": [
							"var resData = JSON.parse(responseBody);\r",
							"\r",
							"// Assertions\r",
							"// The Content-Type must be JSON\r",
							"     pm.test(\"Response must be json\", function (){\r",
							"            pm.response.to.be.json; \r",
							"    });\r",
							"\r",
							"  // The response time must be less than 1500 milliseconds\r",
							"  tests[\"Response time is acceptable\"] = responseTime < 1500;\r",
							"\r",
							"\r",
							"// The response must have a body\r",
							"    pm.test(\"Response must have a body\", function (){\r",
							"            pm.response.to.be.withBody;\r",
							"    });\r",
							"\r",
							"pm.test(\"Status code should be 200: \"+pm.response.code,function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Verify if returning operation id: \" +resData.operation_id, function(){\r",
							"    pm.expect(resData).to.have.property('operation_id');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json"
					},
					{
						"key": "Authorization",
						"value": "{{token_type}}{{access_token}}"
					}
				],
				"url": {
					"raw": "{{cloudwaysUrl}}/api/v1/server/{{server_id}}",
					"host": [
						"{{cloudwaysUrl}}"
					],
					"path": [
						"api",
						"v1",
						"server",
						"{{server_id}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "3e63a10f-08f3-449b-b3ce-be04182a6059",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f573e80f-4020-4c4f-9525-f1e5a64a803a",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "7bd1e112-c02a-47c9-b3e1-604a5d84a608",
			"key": "cloudwaysUrl",
			"value": "https://api.cloudways.com"
		}
	],
	"protocolProfileBehavior": {}
}